version: 2.1

orbs:
  # helm: circleci/helm@3.0.2
  aws-ecr: circleci/aws-ecr@9.0.4
    # aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@4.1.3
    # docker: circleci/docker@2.1.1
    # azure-aks: circleci/azure-aks@0.3.0
    # kubernetes: circleci/kubernetes@1.3.0
  gh-cli: circleci/github-cli@2.3.0
  slack: circleci/slack@4.13.3


parameters:
  run-recipes-go:
    default: false 
    type: boolean
  run-suppliers-go:
    default: false
    type: boolean
  run-frontend:
    default: false
    type: boolean


workflows:
#   Sync Frontend:
#     when: << pipeline.parameters.run-frontend >>
#     jobs:
#     - build_and_push_image:
#         context: aws-dev
#         repo: frontend
  Sync Recipes:
    when: << pipeline.parameters.run-recipes-go >>
    jobs:
    - build_and_push_image:
        name: recipes-build-push
        context: [ aws-dev, slack-secrets ]
        repo: recipes
        app: recipes


    - argocd-manual-sync:
        requires: [recipes-build-push]
        name: recipes-manual-sync
        context: slack-secrets
        server: $ARGOCD_SERVER_DEV
        username: $ARGOCD_USERNAME
        password: $ARGOCD_PASSWORD
        app: recipes

  Sync Suppliers:
    when: << pipeline.parameters.run-suppliers-go >>
    jobs:
    - build_and_push_image:
        name: suppliers-build-push
        context: [ aws-dev, slack-secrets ]
        repo: suppliers
        app: suppliers


    - argocd-manual-sync:
        requires: [suppliers-build-push]
        name: suppliers-manual-sync
        context: slack-secrets
        server: $ARGOCD_SERVER_DEV
        username: $ARGOCD_USERNAME
        password: $ARGOCD_PASSWORD
        app: suppliers

  # Create Release Branch:
  #   jobs:
  #   - create_branch_or_tag:
  #       branch_name: "release"

jobs:

  # create_branch_or_tag:
  #   machine: 
  #     image: ubuntu-2004:current
  #   parameters:
  #     branch_name:
  #       type: string
  #   working_directory: ~/repo
  #   steps:
  #   - checkout
  #   - run:
  #       name: Add tag/branch
  #       command: |
         
  #         if [[ $( git show --oneline | grep "v[0-9].[0-9].[0-9]-release" ) != ""  ]]; then
  #           echo "Merge from Release branch"
  #           git fetch --all --tags 
  #           tag=$(git tag -l 'v[0-9].[0-9].[0-9]-beta.*' --sort=-version:refname | head -n 1)
  #           beta_version=${tag##*.}
  #           new_beta_version=$((beta_version + 1))
  #           # add beta tag
  #           only_tag=${tag%.*}
  #           new_tag=$only_tag.$new_beta_version
  #           git tag $new_tag
  #           git push origin $new_tag 
  #         elif [ $( git show --oneline | grep "hotfix" ) != ""  ]]; then
  #           echo "Merge from Hotfix branch"
  #         else  
  #           git fetch --all --tags
  #           tag=$(git tag -l 'v[0-9].[0-9].[0-9]' --sort=-version:refname | head -n 1)
  #           version=${tag#"v"}
  #           IFS=. read -r major minor patch \<<< "$version"
  #           minor=$((minor + 1))
  #           patch=0
  #           tag="v$major.$minor.$patch"
  #           new_branch_name=$tag-<< parameters.branch_name >>
  #           if [[ -n "$(git branch --list "$new_branch_name")" ]]; then
  #             echo "Branch '$new_branch_name' exists locally."
  #           else
  #             echo "Branch '$new_branch_name' does not exist locally."
  #             echo "Creating branch: $new_branch_name"
  #             git checkout -b $new_branch_name
  #             git push origin $new_branch_name
  #             # add beta tag
  #             git tag $tag-beta.0
  #             git push origin $tag-beta.0
  #           fi
  #         fi
    
  build_and_push_image:
    machine: 
      image: ubuntu-2004:current
    working_directory: ~/repo
    parameters:
      repo:
        type: string
      app:
        type: string
    steps:
    - aws-ecr/build_and_push_image:
        attach_workspace: true
        auth:
        - aws-cli/setup:
          role_arn: arn:aws:iam::975050257492:role/Cirlce-ci-push-ecr
          aws-region: ${AWS_REGION}
          # optional parameters
          role-session-name: "example-session"
          session-duration: "1800"
        account_id: ${AWS_ECR_REGISTRY_ID}
        create_repo: true
        dockerfile: Dockerfile
        # executors: base
        # extra_build_args: '--compress'
        no_output_timeout: 20m
        path: ./<< parameters.app >>
        build_path: ./<< parameters.app >>
        platform: linux/amd64
        public_registry: false
        push_image: true
        region: ${AWS_REGION}
        repo: << parameters.repo >> 
        # repo_encryption_kms_key: arn:aws:kms::123456789012:key/UUID4_OF_KMS_KEY_ID
        # repo_encryption_type: KMS
        # repo_policy_path: repo-policy.json
        repo_scan_on_push: true
        # set_repo_policy: true
        skip_when_tags_exist: false
        # tag: 1.0.0
        tag: $(echo "v1.0.0-<< pipeline.git.revision >>")
        # tag: $(echo "1.0.0-<< pipeline.number >>" | sed 's/:/_/g')
          # Tag the image with the date and time of the build.
          # This can be done using build automation tools or scripting.
          # The tag might look like my-app:2024-05-04T1349.
         
        # tag: $(if [[ -z "<< pipeline.git.tag >>" ]]; then
        #         echo "latest";
        #         else echo "<< pipeline.trigger_parameters.circleci.event_time >><< pipeline.trigger_parameters.github_app.commit_sha >>";
        #        fi)
    - slack/notify:
        event: fail
        template: basic_fail_1
    - slack/notify:
        event: pass
        template: basic_success_1

  argocd-manual-sync:
    docker:
    - image: cimg/base:stable
    parameters:
      server:
        description: |
          Server IP of ArgoCD
        type: string
      username:
        description: |
          Username for ArgoCD
        type: string
      password:
        description: |
          Password for ArgoCD
        type: string
      app:
        type: string
    steps:
    - run:
        name: Install ArgoCD CLI
        command: |
          URL=https://<< parameters.server >>/download/argocd-linux-amd64
          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo
          $SUDO curl --insecure -sSL -o /usr/local/bin/argocd $URL
          $SUDO chmod +x /usr/local/bin/argocd

    - run:
        name: ArgoCD CLI login
        command: argocd login << parameters.server >> --insecure --username << parameters.username >> --password << parameters.password >>

    - run: 
        name: Change image tag
        command: |
          argocd app set << parameters.app >>-staging --helm-set image.tag=v1.0.0-<< pipeline.git.revision >>

    - run:
        name: Manual sync
        command: argocd app sync << parameters.app >>-staging
    - run:
        name: Wait for application to reach a synced and healthy state
        command: argocd app wait << parameters.app >>-staging

    - slack/notify:
        event: fail
        template: basic_fail_1 
    - slack/notify:
        event: pass
        template: basic_success_1

# fdsf