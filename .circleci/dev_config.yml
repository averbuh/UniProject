version: 2.1

orbs:
  aws-ecr: orbies/aws-ecr@1.2.1
  aws-ecr-circle: circleci/aws-ecr@9.0.4
  helm: circleci/helm@3.0.2
  aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@4.1.3
  docker: circleci/docker@2.1.1
  azure-aks: circleci/azure-aks@0.3.0
  kubernetes: circleci/kubernetes@1.3.0


workflows:
  Push_to_ECR:
    jobs:
    - aws-ecr-circle/build_and_push_image:
        account_id: ${AWS_ACCOUNT_ID}
        auth:
          access_key_id: ${AWS_ACCESS_KEY_ID}
    #TEsts
    - aws-cli/setup:
        #profile: OIDC-USER
        role_arn: arn:aws:iam::123456789012:role/VALID_OIDC_ECR_ROLE
        context: CircleCI_OIDC_Token
        create_repo: true
        dockerfile: Dockerfile
        extra_build_args: '--compress'
        no_output_timeout: 20m
        path: .
        platform: linux/amd64
        profile_name: OIDC-User
        public_registry: false
        push_image: true
        region: ${AWS_DEFAULT_REGION}
        repo: "services-project-ops"
        repo_encryption_kms_key: arn:aws:kms::123456789012:key/UUID4_OF_KMS_KEY_ID
        repo_encryption_type: KMS
        repo_policy_path: repo-policy.json
        repo_scan_on_push: true
        set_repo_policy: true
        skip_when_tags_exist: false
        tag: "latest"
    - aws-ecr/push-helm-chart:
        account-url: $AWS_ECR_ACCOUNT_URL
        aws-access-key-id: $AWS_ACCESS_KEY_ID
        aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
        create-repo: false
        path: ./charts
        region: eu-central-1
        repo: "${AWS_ECR_HELM_REPO_NAME}"
        tag: "latest"
        requires:
        - aws-ecr-circle/build_and_push_image

    - argocd-configure:
        cluster-name: $CLUSTER_NAME
        resource-group: $RESOURCE_GROUP

    - argocd-manual-sync:
        server: $ARGOCD_SERVER
        username: $ARGOCD_USERNAME
        password: $ARGOCD_PASSWORD
        requires:
        - argocd-configure


jobs:

  argocd-manual-sync:
    docker:
    - image: cimg/base:stable
    parameters:
      server:
        description: |
          Server IP of of ArgoCD
        type: string
      username:
        description: |
          Username for ArgoCD
        type: string
      password:
        description: |
          Password for ArgoCD
        type: string
    steps:
    - run:
        name: Install ArgoCD CLI
        command: |
          URL=https://<< parameters.server >>/download/argocd-linux-amd64
          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo
          $SUDO curl --insecure -sSL -o /usr/local/bin/argocd $URL
          $SUDO chmod +x /usr/local/bin/argocd
    - run:
        name: ArgoCD CLI login
        command: argocd login << parameters.server >> --insecure --username << parameters.username >> --password << parameters.password >>
    - run:
        name: Manual sync
        command: argocd app sync $APP_NAME
    - run:
        name: Wait for application to reach a synced and healthy state
        command: argocd app wait $APP_NAME


  argocd-configure:
    executor: azure-aks/default
    parameters:
      cluster-name:
        description: |
          Name of the AKS cluster
        type: string
      resource-group:
        description: |
          Resource group that the cluster is in
        type: string
    steps:
    - checkout
    - run:
        name: Pull Updated code from repo
        command: git pull origin $CIRCLE_BRANCH
    - azure-aks/update-kubeconfig-with-credentials:
        cluster-name: << parameters.cluster-name >>
        install-kubectl: true
        perform-login: true
        resource-group: << parameters.resource-group >>
    - kubernetes/create-or-update-resource:
        resource-file-path: argocd/config.yaml

